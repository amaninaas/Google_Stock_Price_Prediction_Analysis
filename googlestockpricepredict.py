# -*- coding: utf-8 -*-
"""GoogleStockPricePredict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d3ngx7icSiY-QQG4en7--xwH6Wd5Y4VV
"""

#%% Module
import matplotlib.pyplot as plt
import numpy as np
import pickle
import pandas as pd
import os

#%% Constants
CSV_PATH_TRAIN = os.path.join(os.getcwd(),'Datasets','Google_Stock_Price_Train.csv')

CSV_PATH_TEST = os.path.join(os.getcwd(),'Datasets','Google_Stock_Price_Test.csv')

#%% STEP 1) Data Loading
df = pd.read_csv(CSV_PATH_TRAIN)
df_test = pd.read_csv(CSV_PATH_TEST)

#%% STEP 2) Data Visualization
df.head()
df.tail()
df.info()
df.isna().sum()
df.describe().T

df.head()

df.describe().T

import matplotlib.pyplot as plt
import numpy as np

# Time Series Data
con_col = df.columns[(df.dtypes=='float64')]
print(con_col)

# time Series Data Visualization (Line Plot)
for i in con_col:
    print(i)
    plt.figure()
    plt.plot(df[i])
    plt.show()

yerr = df['High'] - df['Low']

xaxis = np.arange(len(df['Open']))
plt.figure()
plt.errorbar(xaxis, df['Open'], yerr=yerr)
plt.show()

# the error bar was there but to small to view so we need to
# use df_disp to zoom.

#To zoom the data to view the error bar
df_disp = df[100:150] 
yerr = df_disp['High'] - df_disp['Low']

xaxis = np.arange(len(df_disp['Open']))
plt.figure()
plt.errorbar(xaxis, df_disp['Open'], yerr=yerr)
plt.show()

#%% Step 3: Data Cleaning
# Do not clean time series data unless REALLY necessary

#%% Step 4: Feature selection
# Open - Only 1 feature 
# Train Dataset
X = df['Open'] 

# Method 1: MinMaxScaler
from sklearn.preprocessing import MinMaxScaler
import numpy as np

mms = MinMaxScaler()
X = mms.fit_transform(np.expand_dims(X,axis=-1))

#%%

win_size = 60
X_train = []
y_train = []

# produce list
for i in range(win_size,len(X)):
  X_train.append(X[i-win_size:i])
  y_train.append(X[i])


# change list to rank 3 array by using np.array
X_train = np.array(X_train) 
y_train = np.array(y_train)

#%% Test Dataset
# We need 60 days of data to predict the price
# The test data only have 20 sample so we need to concatenate together with 
# train data

#%% Must to concatenate
dataset_cat = pd.concat((df['Open'],df_test['Open']))

# Method 1
length_days = len(dataset_cat)-len(df_test)-win_size
tot_input = dataset_cat[length_days:] 

Xtest = mms.transform(np.expand_dims(tot_input,axis=-1))

X_test = []
y_test = []

# produce list
for i in range(win_size,len(Xtest)):
  X_test.append(Xtest[i-win_size:i])
  y_test.append(Xtest[i])

# change list to rank 3 array by using np.array
X_test = np.array(X_test) 
y_test = np.array(y_test)

# Method 2 
# To access last 80 component
#length_days = win_size + len(df_test)
#print(length_days)

#tot_input = dataset_cat[-length_days:]
#print(tot_input)

#%% Step 5: Data Preprocessing

#%% Model Development

from tensorflow.keras import Sequential,Input
from tensorflow.keras.layers import LSTM,Dropout,Dense

input_shape = np.shape(X_train)[1:]

model = Sequential()
model.add(Input(shape=(input_shape))) # LSTM, RNN, GRU only accept 3D array
model.add(LSTM(128,return_sequences=(True)))
model.add(Dropout(0.3))
model.add(LSTM(128,return_sequences=(True)))
model.add(Dropout(0.3))
model.add(LSTM(128))
model.add(Dropout(0.3))
model.add(Dense(1,activation='relu'))
model.summary()

from tensorflow.keras.utils import plot_model
plot_model(model,show_shapes=True,show_layer_names=True)

#%% Model Training

model.compile(optimizer='adam',loss='mse',
              metrics=['mean_absolute_percentage_error','mse'])

#%% Model Training
from tensorflow.keras.callbacks import EarlyStopping,TensorBoard
import datetime

#Callbacks
#LOGS_PATH = os.path.join(os.getcwd(),'logs',datetime.datetime.now()
#                         .strftime('%Y%m%d-%H%M%S'))
#tensorboard_callback = TensorBoard(log_dir=LOGS_PATH,histogram_freq=1)
# EarlyStopping
#early_callback = EarlyStopping(monitor='val_loss',patience=5)

hist = model.fit(X_train,y_train,
                 epochs=100,
                 validation_data=(X_test,y_test))

print(hist.history.keys())

#%%
plt.figure()
plt.plot(hist.history['mse'])
plt.plot(hist.history['val_mse'])
plt.xlabel('epoch')
plt.legend(['Training MSE','Validation MSE'])
plt.show()

predicted_stock_price = model.predict(X_test)

#%%

plt.figure()
plt.plot(y_test,color='red')
plt.plot(predicted_stock_price,color='blue')
plt.xlabel('Time')
plt.ylabel('Stock price USD$')
plt.legend(['Actual','Predicted'])
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %load_ext tensorboard

actual_price = mms.inverse_transform(y_test)
predicted_price = mms.inverse_transform(predicted_stock_price)

from sklearn.metrics import mean_absolute_error,mean_squared_error

plt.figure()
plt.plot(y_test,color='red')
plt.plot(predicted_stock_price,color='aqua')
plt.xlabel('Days')
plt.ylabel('Stock price USD$')
plt.legend(['Actual','Predicted'])
plt.show()

print(mean_absolute_error(actual_price,predicted_price))
print(mean_squared_error(actual_price,predicted_price))

import plotly.graph_objects as go
from datetime import datetime

fig = go.Figure(data=[go.Candlestick(x=df['Date'],
                      open=df['Open'],
                      high=df['High'],
                      low=df['Low'],
                      close=df['Close'])])
fig.show()

#%%

# import required packages
import matplotlib.pyplot as plt
from mplfinance.original_flavor import candlestick_ohlc
import pandas as pd
import matplotlib.dates as mpdates

df['Close'] = pd.to_numeric(df['Close'].astype(str).str.replace(',',''), errors='coerce')

# convert into datetime object
df['Date'] = pd.to_datetime(df['Date'])
 
# apply map function
df['Date'] = df['Date'].map(mpdates.date2num)
 
# creating Subplots
fig, ax = plt.subplots()
 
# plotting the data
candlestick_ohlc(ax, df.values, width = 0.6,
                  colorup = 'green', colordown = 'red',
                  alpha = 0.8)
 
# allow grid
ax.grid(True)
 
# Setting labels
ax.set_xlabel('Date')
ax.set_ylabel('Price')
# setting title
plt.title('Prices For the Period DD-MM-YYYY to DD-MM-YYYY')
 
# Formatting Date
date_format = mpdates.DateFormatter('%d-%m-%Y')
ax.xaxis.set_major_formatter(date_format)
fig.autofmt_xdate()
 
fig.tight_layout()
 
# show the plot
plt.show()